import java.awt.*;import java.util.*;import java.applet.Applet;public class continuousCanvas extends Canvas{  static	double	ymax, ymin, xmax, xmin, xmid = 0;  continuousInfo	cInfo;  continuousDist	distApplet;  int				paraIndex;  private			Dimension dimension;   int		xTickMarks = 5;  int		yTickMarks = 5;  tickmarkManager tManager;  String tmpString = new String();    public continuousCanvas(	continuousInfo tmpInfo,     						continuousDist tmpApplet) {	distApplet = tmpApplet;  	cInfo = tmpInfo;  	tManager = new tickmarkManager(1.0);  }    public void paint(Graphics g) {  	Insets	inset = new Insets(10, 60, 20, 30) ;		double	xTickInterval;	int		xcoord, ycoord;		PlotCoord pc;		dimension = getSize();		distApplet.textFieldPara1.setText(distApplet.cInfo.getParaString(0));	if (!distApplet.cInfo.isNormal)		distApplet.cInfo.setChiSqCont();	if (distApplet.cInfo.isNormal)		distApplet.textFieldPara2.setText(distApplet.cInfo.getParaString(1));	if(distApplet.cInfo.isPDF())	{		distApplet.pdfORcdf.setSelectedCheckbox(distApplet.checkBoxPDF);		((CardLayout)distApplet.panelProb.getLayout()).show(distApplet.panelProb, "prob");		((CardLayout)distApplet.panelResult.getLayout()).show(distApplet.panelResult, "prob");		distApplet.labelTitle.setText(distApplet.cInfo.distName + "  PDF  ");		distApplet.probCanvas.setText(distApplet.cInfo.getProbString(),				distApplet.cInfo.getProbStringValue());		distApplet.approxCanvas.setText(distApplet.cInfo.getApproxProbString(),				distApplet.cInfo.getApproxProbValue());	}	else {		distApplet.pdfORcdf.setSelectedCheckbox(distApplet.checkBoxCDF);		((CardLayout)distApplet.panelProb.getLayout()).show(distApplet.panelProb, "quantile");		((CardLayout)distApplet.panelResult.getLayout()).show(distApplet.panelResult, "quantile");		distApplet.labelTitle.setText(distApplet.cInfo.distName + "  CDF  ");		distApplet.probCanvas.clearText(); distApplet.approxCanvas.clearText();	}			ymax = distApplet.cInfo.countYmax();	xmax = distApplet.cInfo.countXmax();	xmin = distApplet.cInfo.countXmin();	ymin = distApplet.cInfo.countYmin();	xmid = (Math.round((xmax+xmin)/2*10))/10.0;	tManager.reset(ymax);	ymax = tManager.getMaxValue();	yTickMarks = tManager.getTickNumber();	xTickInterval = distApplet.cInfo.setXTickMarkInterval(xmax-xmin);	pc = new PlotCoord (xmax, ymax, xmin, ymin, dimension.width, dimension.height-10, inset);	g.setFont(new Font ("Dialog", Font.PLAIN, 10));    /* Draw x&y axis. */	g.setColor(Color.white);	g.drawLine(pc.xcoord(xmin), pc.ycoord(ymin),               pc.xcoord(xmax), pc.ycoord(ymin));	g.drawLine(pc.xcoord(xmin), pc.ycoord(ymax),               pc.xcoord(xmin), pc.ycoord(ymin));	String tmpString;	// Draw X' & Y' tickmarks	int halfNumberXTick = xTickMarks/2;	double tmpDouble = 0.0;	int tmpStringLength = 3;	for (int i=-halfNumberXTick; i<=halfNumberXTick; i++) {				tmpStringLength = 3;		tmpDouble = xmid + i * xTickInterval;		tmpString = new String(new Double( tmpDouble ).toString());		xcoord = pc.xcoord( tmpDouble ) + 1;		ycoord = pc.ycoord(ymin);		g.drawLine(xcoord , ycoord - 3, xcoord , ycoord + 3);		if (tmpDouble < 0) tmpStringLength++;		if (Math.abs(tmpDouble) > 10.0) tmpStringLength++;		if (Math.abs(tmpDouble) > 100.0) tmpStringLength++;					g.drawString (				new String (tmpString.substring(0, Math.min(tmpStringLength, tmpString.length()))),                 xcoord - 3, ycoord + 15);    }		for (int i=0; i<=yTickMarks; i++) {			xcoord = pc.xcoord(xmin);		ycoord = pc.ycoord(ymax/yTickMarks*i); 		g.drawLine(xcoord - 3, ycoord, xcoord + 3 , ycoord);		tmpString = tManager.getTickString(yTickMarks-i);		g.drawString(tmpString, xcoord - tmpString.length()*5 - 8, ycoord + 3 );    }    	// Draw Graph	g.setColor(Color.cyan);	double	tmpProb = 0.0;	int		xprevcoord = pc.xcoord(xmin);	int		yprevcoord; 	int		steps = 600; 	double	stepWidth = (xmax - xmin)/steps; 	double	xPosTmp; 	int recX[] = new int[4];	int recY[] = new int[4];		if (distApplet.cInfo.isPDF())		yprevcoord = pc.ycoord(cInfo.pointYvalue(xmin));	else		yprevcoord = pc.ycoord(0); 	for (int i = 1; i <= steps; i++) { 					xPosTmp = xmin + i * stepWidth;		xcoord = pc.xcoord( xPosTmp ) + 1;		if (distApplet.cInfo.isPDF()) {			ycoord = pc.ycoord(cInfo.pointYvalue(xPosTmp));			if (( xPosTmp-stepWidth+1E-4 > distApplet.cInfo.questionLower ) &&				( xPosTmp-1E-4 < distApplet.cInfo.questionUpper ) ) {				g.setColor(Color.red);				recX[0] = recX[1] = xprevcoord;					recY[0] = recY[3] = pc.ycoord(0.0);				recX[2] = recX[3] = xcoord;				recY[1] = yprevcoord; recY[2] = ycoord;				g.fillPolygon(recX, recY, 4);				g.setColor(Color.cyan);			}		}		else 			ycoord = pc.ycoord(cInfo.accumYvalue(xPosTmp));            		g.drawLine(xcoord , ycoord, xprevcoord, yprevcoord);		xprevcoord = xcoord;		yprevcoord = ycoord;	}		if (!distApplet.cInfo.isPDF()) {				int xcoordQuantile = pc.xcoord(distApplet.cInfo.computeQuantile());		int ycoordQuantile = pc.ycoord(distApplet.cInfo.quantile);				g.setColor(Color.red);		g.drawLine(pc.xcoord(xmin), ycoordQuantile, xcoordQuantile, ycoordQuantile);		g.drawLine(xcoordQuantile, pc.ycoord(0.0), xcoordQuantile, ycoordQuantile);		distApplet.labelQuantile.setText(new Double((int)(distApplet.cInfo.computeQuantile()*1000)					/1000.0).toString());	}      	    /* Draw x&y axis. */	g.setColor(Color.white);	g.drawLine(pc.xcoord(xmin), pc.ycoord(ymin),               pc.xcoord(xmax), pc.ycoord(ymin));	g.drawLine(pc.xcoord(xmin), pc.ycoord(ymax),               pc.xcoord(xmin), pc.ycoord(ymin));	g.drawLine(pc.xcoord(xmin)+1, pc.ycoord(ymax),               pc.xcoord(xmin)+1, pc.ycoord(ymin));	if ( distApplet.cInfo.isPDF() ) { 		distApplet.probCanvas.setText(distApplet.cInfo.getProbString(),			distApplet.cInfo.getProbStringValue());		distApplet.approxCanvas.setText(distApplet.cInfo.getApproxProbString(),				distApplet.cInfo.getApproxProbValue());	}				distApplet.cInfo.doRescale = false;  }  }