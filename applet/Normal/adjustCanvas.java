import java.awt.*;import java.util.*;import java.applet.Applet;import java.awt.event.MouseEvent;public class adjustCanvas extends Canvas implements Runnable {  private final int triangleWidth = 5;  private final int triangleHeight = 9;  private final int fontBase = 7;    private final int startLX =  0;  private final int startRX = 20;  private final int startY  =  6;    continuousInfo	cInfo;  continuousDist	distApplet;  int			paraIndex;  private final int bufferSpace  =  3;    Image			imageSign;    public adjustCanvas(	continuousInfo tmpInfo,     						continuousDist tmpApplet,							int tmpIndex) {								enableEvents(AWTEvent.MOUSE_EVENT_MASK);	enableEvents(AWTEvent.MOUSE_MOTION_EVENT_MASK);	distApplet = tmpApplet;  	paraIndex = tmpIndex;  	cInfo = tmpInfo;  	this.setSize(40, 20);  	  }    public void paint (Graphics g) {	int triangleX[] = new int[3];	int triangleY[] = new int[3];		g.setColor(Color.black);		imageSign = distApplet.getImage(distApplet.getCodeBase(),						distApplet.cInfo.getImageFileName(paraIndex));	g.drawImage(imageSign, startLX + triangleWidth+4, startY-1,			 8, 12, this);			g.drawString("=", startRX + triangleWidth + 3, startY + fontBase);		triangleX[0] = startLX;	triangleX[1] = triangleX[2] = triangleWidth + startLX;	triangleY[0] = (triangleHeight+1)/2 + startY;	triangleY[1] = startY;	triangleY[2] = startY + triangleHeight;	g.fillPolygon(triangleX, triangleY, 3);		triangleX[0] = startRX + triangleWidth;	triangleX[1] = triangleX[2] = startRX;	g.fillPolygon(triangleX, triangleY, 3);				   }    public void processMouseEvent(MouseEvent e) {	int x = e.getX(), y = e.getY();	try {	  if ( e.getID() == e.MOUSE_PRESSED ) {		if (isClickLeft(x, y)) {			distApplet.cInfo.decPara(paraIndex);			distApplet.cCanvas.repaint();		}		else if (isClickRight(x, y)) {			distApplet.cInfo.incPara(paraIndex);			distApplet.cCanvas.repaint();		}		else if (isClickMiddle(x, y)) {			Thread newThread = new Thread(this);			try {				newThread.sleep(100);				newThread.start();			} catch (Exception ex) { }		}	  }	}catch (NumberFormatException e1) {}	  }      private boolean isClickLeft(int x, int y) {    	if ( ( x>=startLX ) && ( x<=(startLX+triangleWidth) )   		 && ( y>=startY ) && ( y<=(startY+triangleHeight) ) )  		   		 	return(true);  	else	return(false);    }     private boolean isClickRight(int x, int y) {    	if ( ( x>=startRX ) && ( x<=(startRX+triangleWidth) )   		 && ( y>=startY ) && ( y<=(startY+triangleHeight) ) )  		   		 	return(true);  	else	return(false);    }   private boolean isClickMiddle(int x, int y) {    	if ( ( x>(startLX + triangleWidth + bufferSpace)) && ( x<(startRX - bufferSpace))   		 && ( y>=startY ) && ( y<=(startY+triangleHeight) ) )  		   		 	return(true);  	else	return(false);    }    public void run() {				incFrame iFrame = new incFrame(new Frame(), distApplet, paraIndex);  }   	 }