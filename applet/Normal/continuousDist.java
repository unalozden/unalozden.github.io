import java.awt.*;import java.util.*;import java.applet.Applet;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.*;public class continuousDist extends Applet implements Runnable, ItemListener, ActionListener {	// Define standard components	Label			labelTitle, labelQuantile;	TextField		textFieldPara2, textFieldPara1;	Button			buttonRescale, buttonReset;	Checkbox		checkBoxPDF, checkBoxCDF;	CheckboxGroup	pdfORcdf;	Choice			choiceProb, choiceFunc;	Panel			panelTitle, panelBottom, panelProb, panelResult;	Panel			cardP1, cardP2, cardP3, cardP4;	PopupMenu 		menuProb;	MenuItem		menuitemGE, menuitemLE, menuitemLEGE, menuitemE;	MenuTrigger 	menuPopup;		// Definne my components	adjustCanvas	aCanvasPara1, aCanvasPara2;	//WVSRSCanvas		wCanvas;	quantileCanvas	qCanvas;	continuousCanvas	cCanvas;	continuousInfo	cInfo;	stringCanvas	probCanvas, approxCanvas;		private int choiceIndex;	private String	dummyString = new String("                                              ");		  public void init() {	String			distName;    GridBagLayout	gridbag = new GridBagLayout();    GridBagConstraints	constraints = new GridBagConstraints();		setLayout(new BorderLayout(0,0));	this.setBackground(Color.black);		try {		distName	= getParameter("DistributionName");	} catch (Exception e) {		distName	= getParameter("Normal");	}		try {			cInfo		= new continuousInfo(distName, getParameter("display"));	} catch (Exception e) {		cInfo		= new continuousInfo(distName, "PDF");	}			if (cInfo.isNormal){		try {				cInfo.setInitPara(getParameter("mu"), (int)0);			cInfo.setInitPara(getParameter("sigma"), (int)1);		} catch (Exception e) {			cInfo.setInitPara("0.0", (int)0);			cInfo.setInitPara("1.0", (int)1);		}		}	else {		try {				cInfo.setInitPara(getParameter("df"), (int)0);		} catch (Exception e) {			cInfo.setInitPara("3", (int)0);		}		}		// Title Panel	constraints.insets = new Insets(0, 0, 0, 0);	constraints.ipadx = 0;		panelTitle = new Panel();	Font fTemp = new Font ("Dialog", Font.PLAIN, 12);	labelTitle = new Label(distName + " PDF  ");	labelTitle.setFont(fTemp);	labelTitle.setForeground(Color.white);	cCanvas = new continuousCanvas(cInfo, this);	cCanvas.setSize(400, 200);	add("Center", cCanvas);	// Main panel	panelBottom = new Panel();	panelBottom.setLayout(gridbag);	panelBottom.setForeground(Color.black);	panelBottom.setBackground(Color.gray);			// Row1.0 f(x) label	constraints.anchor = GridBagConstraints.WEST;	pdfORcdf = new CheckboxGroup();	checkBoxPDF = new Checkbox("f (x)", pdfORcdf, false);	addComp(gridbag, new Label(" "), constraints);	addComp(gridbag, checkBoxPDF, constraints);	checkBoxPDF.addItemListener(this);		// Row1.1  Choice ChoiceFunc	constraints.fill   = GridBagConstraints.NONE;	constraints.anchor   = GridBagConstraints.CENTER;	constraints.weightx = 1.0;	// Row1.2 aCanvasPara1	constraints.anchor = GridBagConstraints.EAST;	aCanvasPara1 = new adjustCanvas(cInfo, this, 0);	addComp(gridbag, aCanvasPara1, constraints);	// Row1.3 TextField1	constraints.anchor = GridBagConstraints.WEST;	textFieldPara1 = new TextField(new String(cInfo.getParaString(0)),3);	addComp(gridbag, textFieldPara1, constraints);	// Row1.5 choiceProb	constraints.anchor = GridBagConstraints.SOUTH;	panelProb = new Panel();	panelProb.setSize(70, 20);	addComp(gridbag, panelProb, constraints);	panelProb.setLayout(new CardLayout());	cardP1 = new Panel();	cardP2 = new Panel();		//choiceProb=new Choice();	//choiceProb.addItem("Prob");	//choiceProb.addItem("x>=a");	//choiceProb.addItem("x<=b");	//choiceProb.addItem("a<=x<=b");	//choiceProb.addItem("x = ?");	//choiceProb.addItemListener(this);		menuProb = new PopupMenu();	menuitemGE = new MenuItem("x>=a"); menuitemGE.addActionListener(this); menuProb.add(menuitemGE);	menuitemLE = new MenuItem("x<=b"); menuitemLE.addActionListener(this); menuProb.add(menuitemLE);	menuitemLEGE = new MenuItem("a<=x<=b"); menuitemLEGE.addActionListener(this); menuProb.add(menuitemLEGE);	menuitemE = new MenuItem("x = ?"); menuitemE.addActionListener(this); menuProb.add(menuitemE);		menuPopup = new MenuTrigger("Prob", Color.gray);	menuPopup.addMouseListener(new MouseAdapter() {		public void mousePressed(MouseEvent e){			menuPopup.pressTrigger();			menuProb.show(menuPopup, 2, menuPopup.getPreferredSize().height);		}						public void mouseReleased(MouseEvent e){			menuPopup.releaseTrigger();		}	});	this.add(menuProb);		cardP1.add(menuPopup);	cardP1.add(new Label(dummyString+dummyString));	cardP1.setBackground(Color.gray);	cardP2.add(new Label(dummyString+dummyString+dummyString+dummyString));	cardP2.setBackground(Color.black);		panelResult = new Panel();	panelResult.setLayout(new CardLayout());	cardP3 = new Panel(); cardP3.setLayout(new BorderLayout(0,0));	cardP4 = new Panel();	try {		qCanvas = new quantileCanvas(cInfo, getParameter("q"), this);	} catch (Exception e) {		qCanvas = new quantileCanvas(cInfo, "0.5", this);	}		qCanvas.setSize(80,20);	//labelProb = new Label(dummyString);	//labelProb.setForeground(Color.blue);	probCanvas = new stringCanvas(150, 25, Color.gray, Color.black);	labelQuantile = new Label("                      ");	labelQuantile.setForeground(Color.red);	cardP3.add("West", probCanvas);	cardP4.add(qCanvas);	cardP4.add(labelQuantile);		panelProb.add("prob", cardP1);	panelProb.add("quantile", cardP2);	panelProb.setBackground(Color.gray);	panelResult.add("prob", cardP3);	panelResult.add("quantile", cardP4);			constraints.anchor = GridBagConstraints.WEST;	constraints.fill   = GridBagConstraints.HORIZONTAL;	addComp(gridbag, panelResult, constraints);			// Row 2.1 SRSWVCanvas	constraints.anchor = GridBagConstraints.CENTER;	constraints.gridwidth = 1;	constraints.anchor = GridBagConstraints.CENTER;	constraints.insets = new Insets(2, 2, 2, 2);	constraints.gridwidth = GridBagConstraints.REMAINDER;	buttonRescale = new Button("Rescale");	buttonRescale.addActionListener(this);	addComp(gridbag, buttonRescale, constraints);	constraints.fill   = GridBagConstraints.NONE;	constraints.insets = new Insets(0, 0, 0, 0);	constraints.gridwidth = 1;		// Row2.0 F(x) label	constraints.anchor = GridBagConstraints.WEST;	checkBoxCDF = new Checkbox("F(x)", pdfORcdf, false);	checkBoxCDF.setBackground(Color.gray);	addComp(gridbag, new Label(" "), constraints);	addComp(gridbag, checkBoxCDF, constraints);	if(cInfo.isPDF())	pdfORcdf.setSelectedCheckbox(checkBoxPDF);	else				pdfORcdf.setSelectedCheckbox(checkBoxCDF);	checkBoxCDF.addItemListener(this);		// Row2.2-Row2.3 labelPara2, textFieldPara2	if ( cInfo.ifHavePara2() ){		constraints.anchor = GridBagConstraints.EAST;		aCanvasPara2 = new adjustCanvas(cInfo, this, 1);		addComp(gridbag, aCanvasPara2, constraints);		constraints.anchor = GridBagConstraints.WEST;		textFieldPara2 = new TextField(new String(cInfo.getParaString(1)), 3);		addComp(gridbag, textFieldPara2, constraints);	}	else {		Label tmpLabelPara1 = new Label(" ");		addComp(gridbag, tmpLabelPara1, constraints);		Label tmpLabelPara2 = new Label(" ");		addComp(gridbag, tmpLabelPara2, constraints);	}				// Row2.5-Row2.6 Button Rescale	approxCanvas = new stringCanvas(150, 20, Color.gray, Color.black);	addComp(gridbag, approxCanvas, constraints);	buttonReset	 = new Button("Reset");	buttonReset.addActionListener(this);	constraints.insets = new Insets(2,2,2,2);	constraints.fill   = GridBagConstraints.HORIZONTAL;	constraints.gridwidth = GridBagConstraints.REMAINDER;	addComp(gridbag, buttonReset, constraints);	//install title panel	panelTitle.setBackground(Color.gray);	constraints.fill   = GridBagConstraints.NONE;	constraints.insets = new Insets(0, 0, 0, 0);	panelTitle.	setLayout(gridbag);	addCompTitle(gridbag, panelProb, constraints);	constraints.fill   = GridBagConstraints.HORIZONTAL;	constraints.anchor   = GridBagConstraints.CENTER;	Panel downPanel = new Panel(); downPanel.add(labelTitle);	downPanel.setBackground(Color.black);	addCompTitle(gridbag, downPanel, constraints);	add("North", panelTitle);	add("South", panelBottom);  } // End of function init()    //Method addComp  private void addComp(GridBagLayout grid,						Component comp,						GridBagConstraints c){	grid.setConstraints(comp,c);	panelBottom.add(comp);    }    private void addCompTitle(GridBagLayout grid,						Component comp,						GridBagConstraints c){	grid.setConstraints(comp,c);	panelTitle.add(comp);    }    public void actionPerformed(ActionEvent e) { 	if ( e.getSource() == buttonRescale ) {				cInfo.putParaValue(this);		cInfo.doRescale = true;		cCanvas.repaint();	}	if ( e.getSource() == buttonReset ) {				cInfo.reset();		cCanvas.repaint();		panelTitle.setBackground(Color.gray);		panelProb.setBackground(Color.gray);	}	if ( ( e.getSource() == menuitemGE ) ){		choiceIndex = 1;		Thread newThread = new Thread(this);		try {			newThread.sleep(100);			newThread.start();		} catch (Exception ex) { }	}			if ( ( e.getSource() == menuitemLE ) ){		choiceIndex = 2;		Thread newThread = new Thread(this);		try {			newThread.sleep(100);			newThread.start();		} catch (Exception ex) { }	}			if ( ( e.getSource() == menuitemLEGE ) ){		choiceIndex = 3;		Thread newThread = new Thread(this);		try {			newThread.sleep(100);			newThread.start();		} catch (Exception ex) { }	}			if ( ( e.getSource() == menuitemE ) ){		choiceIndex = 4;		Thread newThread = new Thread(this);		try {			newThread.sleep(100);			newThread.start();		} catch (Exception ex) { }	}		  }  public void itemStateChanged(ItemEvent e){		if ( ( e.getSource() == checkBoxPDF ) && (!cInfo.isPDF()) ){		cInfo.doRescale = true;		cInfo.fOrF = "f";		cCanvas.repaint();		((CardLayout)panelProb.getLayout()).show(panelProb, "prob");		((CardLayout)panelResult.getLayout()).show(panelResult, "prob");		panelTitle.setBackground(Color.gray); cardP1.repaint();		//panelProb.setBackground(Color.gray);	}	if ( ( e.getSource() == checkBoxCDF ) && ( cInfo.isPDF()) ){		cInfo.doRescale = true;		cInfo.fOrF = "F";		cCanvas.repaint();		((CardLayout)panelProb.getLayout()).show(panelProb, "quantile");		((CardLayout)panelResult.getLayout()).show(panelResult, "quantile");		panelTitle.setBackground(Color.black); cardP1.repaint();		//panelProb.setBackground(Color.black);	}	  }	  public void run() {			dialogFrame dFrame = new dialogFrame(new Frame(), this, choiceIndex);  }	}    